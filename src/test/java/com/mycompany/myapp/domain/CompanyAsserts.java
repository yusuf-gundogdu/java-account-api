package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CompanyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAllPropertiesEquals(Company expected, Company actual) {
        assertCompanyAutoGeneratedPropertiesEquals(expected, actual);
        assertCompanyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAllUpdatablePropertiesEquals(Company expected, Company actual) {
        assertCompanyUpdatableFieldsEquals(expected, actual);
        assertCompanyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyAutoGeneratedPropertiesEquals(Company expected, Company actual) {
        assertThat(expected)
            .as("Verify Company auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyUpdatableFieldsEquals(Company expected, Company actual) {
        assertThat(expected)
            .as("Verify Company relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getDiscountPercentage()).as("check discountPercentage").isEqualTo(actual.getDiscountPercentage()))
            .satisfies(e -> assertThat(e.getAdvertising()).as("check advertising").isEqualTo(actual.getAdvertising()))
            .satisfies(e -> assertThat(e.getDiscountActive()).as("check discountActive").isEqualTo(actual.getDiscountActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompanyUpdatableRelationshipsEquals(Company expected, Company actual) {
        // empty method
    }
}
