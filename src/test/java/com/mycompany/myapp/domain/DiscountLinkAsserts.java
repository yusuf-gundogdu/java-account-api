package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiscountLinkAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountLinkAllPropertiesEquals(DiscountLink expected, DiscountLink actual) {
        assertDiscountLinkAutoGeneratedPropertiesEquals(expected, actual);
        assertDiscountLinkAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountLinkAllUpdatablePropertiesEquals(DiscountLink expected, DiscountLink actual) {
        assertDiscountLinkUpdatableFieldsEquals(expected, actual);
        assertDiscountLinkUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountLinkAutoGeneratedPropertiesEquals(DiscountLink expected, DiscountLink actual) {
        assertThat(expected)
            .as("Verify DiscountLink auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountLinkUpdatableFieldsEquals(DiscountLink expected, DiscountLink actual) {
        assertThat(expected)
            .as("Verify DiscountLink relevant properties")
            .satisfies(e -> assertThat(e.getDiscountAmount()).as("check discountAmount").isEqualTo(actual.getDiscountAmount()))
            .satisfies(e -> assertThat(e.getAccountedPrice()).as("check accountedPrice").isEqualTo(actual.getAccountedPrice()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountLinkUpdatableRelationshipsEquals(DiscountLink expected, DiscountLink actual) {
        assertThat(expected)
            .as("Verify DiscountLink relationships")
            .satisfies(e -> assertThat(e.getDiscountUsage()).as("check discountUsage").isEqualTo(actual.getDiscountUsage()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}
